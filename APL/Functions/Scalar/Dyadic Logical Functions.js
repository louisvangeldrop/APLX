var Dyadic;
(function (Dyadic) {
    var Scalar;
    (function (Scalar) {
        Scalar.and = function (alpha, omega) { return (alpha && omega); };
        Boolean.prototype[APLPrefix + 'and'] = function (omega) { return (this.valueOf() && omega); };
        Scalar.nand = function (alpha, omega) { return !(alpha && omega); };
        Boolean.prototype[APLPrefix + 'nand'] = function (omega) { return (!(this.valueOf() && omega)); };
        Scalar.or = function (alpha, omega) { return (alpha || omega); };
        Boolean.prototype[APLPrefix + 'or'] = function (omega) { return (this.valueOf() || omega); };
        Scalar.nor = function (alpha, omega) { return !(alpha || omega); };
        Boolean.prototype[APLPrefix + 'nor'] = function (omega) { return (!(this.valueOf() || omega)); };
        Scalar.lt = function (alpha, omega) { return alpha < omega; };
        Number.prototype[APLPrefix + 'lt'] = function (omega) { return this.valueOf() < omega; };
        Scalar.le = function (alpha, omega) { return alpha <= omega; };
        Number.prototype[APLPrefix + 'le'] = function (omega) { return this.valueOf() <= omega; };
        Scalar.gt = function (alpha, omega) { return alpha > omega; };
        Number.prototype[APLPrefix + 'gt'] = function (omega) { return this.valueOf() > omega; };
        Scalar.ge = function (alpha, omega) { return alpha >= omega; };
        Number.prototype[APLPrefix + 'ge'] = function (omega) { return this.valueOf() >= omega; };
        Scalar.eq = function (alpha, omega) { return alpha === omega; };
        Number.prototype[APLPrefix + 'eq'] = function (omega) { return this.valueOf() === omega; };
        Scalar.neq = function (alpha, omega) { return alpha !== omega; };
        Number.prototype[APLPrefix + 'neq'] = function (omega) { return this.valueOf() !== omega; };
    })(Scalar = Dyadic.Scalar || (Dyadic.Scalar = {}));
    var Vector;
    (function (Vector) {
        Vector.and = function (omega) { return this.primitive(omega, Scalar.and); };
        Array.prototype[prefix + 'and'] = Vector.and;
        Vector.nand = function (omega) { return this.primitive(omega, Scalar.nand); };
        Array.prototype[prefix + 'nand'] = Vector.nand;
        Vector.or = function (omega) { return this.primitive(omega, Scalar.or); };
        Array.prototype[prefix + 'or'] = Vector.or;
        Vector.nor = function (omega) { return this.primitive(omega, Scalar.nor); };
        Array.prototype[prefix + 'nor'] = Vector.nor;
        Vector.lt = function (omega) { return this.primitive(omega, Scalar.lt); };
        Array.prototype[prefix + 'lt'] = Vector.lt;
        Vector.le = function (omega) { return this.primitive(omega, Scalar.le); };
        Array.prototype[prefix + 'le'] = Vector.le;
        Vector.gt = function (omega) { return this.primitive(omega, Scalar.gt); };
        Array.prototype[prefix + 'gt'] = Vector.gt;
        Vector.ge = function (omega) { return this.primitive(omega, Scalar.ge); };
        Array.prototype[prefix + 'ge'] = Vector.ge;
        Vector.eq = function (omega) { return this.primitive(omega, Scalar.eq); };
        Array.prototype[prefix + 'eq'] = Vector.eq;
        Vector.neq = function (omega) { return this.primitive(omega, Scalar.neq); };
        Array.prototype[prefix + 'neq'] = Vector.neq;
    })(Vector = Dyadic.Vector || (Dyadic.Vector = {}));
})(Dyadic || (Dyadic = {}));
