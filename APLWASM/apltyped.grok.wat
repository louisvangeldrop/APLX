(module
  (memory (export "memory") 1500)
  (global $heap_start (mut i32) (i32.const 0))
  (global $rand_seed (mut i32) (i32.const 12345))

  (func $malloc (param $size i32) (result i32)
    (local $ptr i32)
    (local.set $ptr (global.get $heap_start))
    (global.set $heap_start (i32.add (global.get $heap_start) (local.get $size)))
    (local.get $ptr)
  )

  (func $rand (result i32)
    (global.set $rand_seed
      (i32.add
        (i32.mul (global.get $rand_seed) (i32.const 1103515245))
        (i32.const 12345)
      )
    )
    (i32.and (global.get $rand_seed) (i32.const 0x7fffffff))
  )

  (func $indexGenerator (param $alpha i32) (result i32)
    (local $results i32)
    (local $counter i32)
    (local.set $results (call $malloc (i32.mul (local.get $alpha) (i32.const 4))))
    (local.set $counter (i32.const 0))
    (block
      (loop
        (i32.ge_s (local.get $counter) (local.get $alpha))
        (br_if 1)
        (i32.store (i32.add (local.get $results) (i32.mul (local.get $counter) (i32.const 4))) (local.get $counter))
        (local.set $counter (i32.add (local.get $counter) (i32.const 1)))
        (br 0)
      )
    )
    (local.get $results)
  )

  (func $gradeUp (param $alpha i32) (param $indices i32) (param $low i32) (param $high i32)
    (local $mid i32)
    (local $midValue i32)
    (local $t1 i32)
    (local $t2 i32)
    (local $i i32)
    (local $j i32)
    (local $t3 i32)
    (local $t4 i32)
    (if (i32.le_s (local.get $high) (local.get $low))
      (then (return))
    )
    (local.set $mid (i32.div_s (i32.add (local.get $low) (local.get $high)) (i32.const 2)))
    (local.set $midValue (i32.load (i32.add (local.get $alpha) (i32.mul (i32.load (i32.add (local.get $indices) (i32.mul (local.get $mid) (i32.const 4)))) (i32.const 4)))))
    (local.set $i (local.get $low))
    (local.set $j (local.get $high))
    (block
      (loop
        (i32.gt_s (local.get $i) (local.get $j))
        (br_if 1)
        (local.set $t1 (i32.load (i32.add (local.get $indices) (i32.mul (local.get $i) (i32.const 4)))))
        (local.set $t2 (i32.load (i32.add (local.get $indices) (i32.mul (local.get $j) (i32.const 4)))))
        (local.set $t3 (i32.ge_s (i32.load (i32.add (local.get $alpha) (i32.mul (local.get $t1) (i32.const 4)))) (local.get $midValue)))
        (local.set $t4 (i32.le_s (i32.load (i32.add (local.get $alpha) (i32.mul (local.get $t2) (i32.const 4)))) (local.get $midValue)))
        (if (i32.and (local.get $t3) (local.get $t4))
          (then
            (i32.store (i32.add (local.get $indices) (i32.mul (local.get $i) (i32.const 4))) (local.get $t2))
            (i32.store (i32.add (local.get $indices) (i32.mul (local.get $j) (i32.const 4))) (local.get $t1))
            (local.set $i (i32.add (local.get $i) (i32.const 1)))
            (local.set $j (i32.sub (local.get $j) (i32.const 1)))
          )
          (else
            (if (i32.eqz (local.get $t3)) (then (local.set $i (i32.add (local.get $i) (i32.const 1)))))
            (if (i32.eqz (local.get $t4)) (then (local.set $j (i32.sub (local.get $j) (i32.const 1)))))
          )
        )
        (br 0)
      )
    )
    (call $gradeUp (local.get $alpha) (local.get $indices) (local.get $low) (local.get $j))
    (call $gradeUp (local.get $alpha) (local.get $indices) (local.get $i) (local.get $high))
  )

  (func $deal (param $l i32) (param $r i32) (result i32)
    (local $results i32)
    (local $sliced i32)
    (local $i i32)
    (local $j i32)
    (local $h i32)
    (local.set $results (call $indexGenerator (local.get $l)))
    (local.set $i (i32.const 0))
    (block
      (loop
        (i32.ge_s (local.get $i) (local.get $r))
        (br_if 1)
        (local.set $j (i32.add (local.get $i) (i32.rem_s (call $rand) (i32.sub (local.get $l) (local.get $i)))))
        (local.set $h (i32.load (i32.add (local.get $results) (i32.mul (local.get $i) (i32.const 4)))))
        (i32.store (i32.add (local.get $results) (i32.mul (local.get $i) (i32.const 4))) (i32.load (i32.add (local.get $results) (i32.mul (local.get $j) (i32.const 4)))))
        (i32.store (i32.add (local.get $results) (i32.mul (local.get $j) (i32.const 4))) (local.get $h))
        (local.set $i (i32.add (local.get $i) (i32.const 1)))
        (br 0)
      )
    )
    (local.set $sliced (call $malloc (i32.mul (local.get $r) (i32.const 4))))
    (local.set $i (i32.const 0))
    (block
      (loop
        (i32.ge_s (local.get $i) (local.get $r))
        (br_if 1)
        (i32.store (i32.add (local.get $sliced) (i32.mul (local.get $i) (i32.const 4))) (i32.load (i32.add (local.get $results) (i32.mul (local.get $i) (i32.const 4)))))
        (local.set $i (i32.add (local.get $i) (i32.const 1)))
        (br 0)
      )
    )
    (local.get $sliced)
  )

  (func $main (param $n i32) (param $length i32) (result i32 i32 i32)
    (local $dd i32)
    (local $indexes i32)
    (local $i i32)
    (local $test i32)
    (local $x i32)
    (local.set $dd (call $deal (local.get $length) (local.get $length)))
    (local.set $indexes (call $indexGenerator (local.get $length)))
    (local.set $i (i32.const 0))
    (block
      (loop
        (i32.ge_s (local.get $i) (local.get $n))
        (br_if 1)
        (call $gradeUp (local.get $dd) (local.get $indexes) (i32.const 0) (i32.sub (local.get $length) (i32.const 1)))
        (local.set $i (i32.add (local.get $i) (i32.const 1)))
        (br 0)
      )
    )
    (local.set $test (i32.const 1))
    (local.set $x (i32.const 0))
    (block
      (loop
        (i32.ge_s (local.get $x) (local.get $length))
        (br_if 1)
        (local.set $test (i32.and (local.get $test) (i32.eq (i32.load (i32.add (local.get $dd) (i32.mul (i32.load (i32.add (local.get $indexes) (i32.mul (local.get $x) (i32.const 4)))) (i32.const 4)))) (local.get $x))))
        (local.set $x (i32.add (local.get $x) (i32.const 1)))
        (br 0)
      )
    )
    ;; (i32.const 1)
     (local.get $indexes)
     (local.get $dd)
     (local.get $test)
  )

  ;; Nieuwe reset-functie
  (func $reset_heap
    (global.set $heap_start (i32.const 0))
  )

  (export "main" (func $main))
  (export "reset_heap" (func $reset_heap))
  (export "deal" (func $deal))
  (export "indexGenerator" (func $indexGenerator))
  
 
)